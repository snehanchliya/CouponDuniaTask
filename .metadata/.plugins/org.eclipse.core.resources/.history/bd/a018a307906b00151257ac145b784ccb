package com.coupondunia.utilities;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ProgressDialog;
import android.content.Context;
import android.location.Address;
import android.location.Geocoder;
import android.util.Log;
import android.widget.Toast;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.coupondunia.model.Category;
import com.coupondunia.model.Data;
import com.coupondunia.model.Offers;

public class ServerConnection {

	public interface OffersInterface {
		public void getOffers(List<Data> data, Address address, boolean isSucess);
	}

	private Context context;
	private static final String OFFERS_URL = "http://staging.couponapitest.com/task_data.txt ";
	private final String DATA = "data";
	private final String OutletName = "OutletName";
	private final String LogoURL = "LogoURL";
	private final String NumCoupons = "NumCoupons";
	private final String NeighbourhoodName = "NeighbourhoodName";
	private final String Latitude = "Latitude";
	private final String Longitude = "Longitude";
	private final String Categories = "Categories";
	private final String NAME = "Categories";
	
	private static RequestQueue queue;
	private static OffersInterface offersInterface;
	GPSTracker gps;
	private ProgressDialog progressDialog;
	
	double sourceLat, sourceLong;

	public ServerConnection(Context context) {
		this.context = context;
		progressDialog=new ProgressDialog(context);
	}

	public void setOffersListener(OffersInterface offersInterface) {
		ServerConnection.offersInterface = offersInterface;
	}

	private Address getAddressByLatAndLong(double latitude, double longitude) {
		Geocoder geocoder;
		List<Address> addresses = new ArrayList<Address>();
		geocoder = new Geocoder(context, Locale.getDefault());
		Address address = new Address(Locale.getDefault());
		try {
			addresses = geocoder.getFromLocation(latitude, longitude, 1);
			if (addresses != null && addresses.size() > 0)
				address = addresses.get(0);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return address;
	}

	private Offers mapping(String JSON) {

		gps = new GPSTracker(context);
		if (gps.canGetLocation()) { // gps enabled} // return boolean true/false
			sourceLat = gps.getLatitude();
			sourceLong = gps.getLongitude();

		} else {
			gps.showSettingsAlert();
		}

		Offers offers = new Offers();

		try {
			JSONObject root = new JSONObject(JSON);

			JSONObject dataJSONObj = root.getJSONObject(DATA);

			Data data;
			List<Data> dataList = new ArrayList<Data>(dataJSONObj.length());

			for (int i = 0; i < dataJSONObj.length() - 1; i++) {

				if (dataJSONObj.isNull(String.valueOf(i)))
					continue;
				JSONObject obj = dataJSONObj.getJSONObject(String.valueOf(i));

				String logoURL = String.valueOf(obj.getString(LogoURL));
				String outletName = String.valueOf(obj.getString(OutletName));
				int numCoupons = obj.getInt(NumCoupons);
				String neighbourhoodName = String.valueOf(obj
						.getString(NeighbourhoodName));
				String targetLat = String.valueOf(obj.getString(Latitude));
				String targetLog = String.valueOf(obj.getString(Longitude));

				data = new Data();

				if (logoURL != null && logoURL.length() > 1)
					data.setLogoURL(logoURL);
				if (outletName != null && outletName.length() > 1)
					data.setOutletName(outletName);

				data.setNumCoupons(numCoupons);

				if (neighbourhoodName != null && neighbourhoodName.length() > 1)
					data.setNeighbourhoodName(neighbourhoodName);
				if (targetLat != null && targetLat.length() > 1
						&& targetLog != null && targetLog.length() > 1) {
					data.setLatitude(targetLat);
					data.setLongitude(targetLog);

					double destLat = Double.parseDouble(targetLat);
					double destLong = Double.parseDouble(targetLog);
					data.setDistance(gps.getDistanceByLatAndLong(sourceLat,
							sourceLong, destLat, destLong));
				}

				if (obj.isNull(Categories)) {
					dataList.add(data);
					continue;
				}

				JSONArray categoryObj = obj.getJSONArray(Categories);
				List<Category> categories = new ArrayList<Category>();
				Category category;
				StringBuilder categoiesString = new StringBuilder();
				for (int j = 0; j < categoryObj.length(); j++) {

					if (categoryObj.isNull(j))
						continue;
					JSONObject catObj = categoryObj.getJSONObject(j);
					String name = catObj.getString("Name");

					category = new Category();
					if (name != null && name.length() > 1) {
						categoiesString.append("• " + name + " ");
						category.setName(name);
					}
					categories.add(category);
				}
				
				data.setCategoriesString(categoiesString.toString());
				data.setCategories(categories);
				dataList.add(data);
			}

			offers.setData(dataList);

		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return offers;

		// TypeToken<Collection<OffersModel>>(){}.getType();
		// OffersModel enums = gson.fromJson(JSON, OffersModel.class);
	}

	public void getOffersFromServer() {
			
		if(NetworkManager.isNetworkConnected(context)){
			if(NetworkManager.getNetworkStatus(context).equals("2G")){
				progressDialog.show();
			}
		}else{
			Toast.makeText(context, "Please check your internet connectivity", Toast.LENGTH_LONG).show();
			return;
		}
		
		queue = Volley.newRequestQueue(context);

		// Request a string response from the provided URL.
		StringRequest stringRequest = new StringRequest(Request.Method.GET,
				OFFERS_URL, new Response.Listener<String>() {
					@Override
					public void onResponse(String response) { 
						
						Offers offers = mapping(response);
						
						if(progressDialog.isShowing())
							progressDialog.dismiss();
						
						ServerConnection.offersInterface.getOffers(
								offers.getData(),
								getAddressByLatAndLong(sourceLat, sourceLong),
								true);
						Log.i("onResponse", response);
					}
				}, new Response.ErrorListener() {
					@Override
					public void onErrorResponse(VolleyError error) {
						if(progressDialog.isShowing())
						progressDialog.dismiss();
						ServerConnection.offersInterface.getOffers(null, null,
								false);
					}

				});
		// Add the request to the RequestQueue.
		queue.add(stringRequest);

	}
}
